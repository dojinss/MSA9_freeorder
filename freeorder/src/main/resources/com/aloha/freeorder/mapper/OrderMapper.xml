<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aloha.freeorder.mapper.OrderMapper">
    <resultMap type="Order" id="orderMap">
        <id property="id" column="id" />
        
        <result property="id" column="id" />
        <result property="type" column="type" />
        <result property="orderNumber" column="order_number" />
        <result property="usersId" column="users_id" />
        <result property="title" column="title" />
        <result property="totalQuantity" column="total_quantity" />
        <result property="totalCount" column="total_count" />
        <result property="totalPrice" column="total_price" />
        <result property="status" column="status" />
        <result property="orderedAt" column="ordered_at" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        
        <collection property="itemList" resultMap="itemMap"></collection>
    </resultMap>
    <resultMap type="OrderItem" id="itemMap">
        <result property="id" column="order_items_id" />
        <result property="ordersId" column="orders_id" />
        <result property="productsId" column="products_id" />
        <result property="name" column="name" />
        <result property="quantity" column="quantity" />
        <result property="price" column="price" />
        <result property="amount" column="amount" />

        <collection property="optionList" resultMap="optionMap"></collection>
    </resultMap>

    <resultMap type="OrderOption" id="optionMap">
        <result property="id" column="order_options_id" />
        <result property="optionItemsId" column="option_items_id" />
        <result property="name" column="options_name" />
        <result property="price" column="options_price" />
    </resultMap>

    <!-- 주문 목록 -->
    <select id="list" resultMap="orderMap">
        SELECT o.*
              ,oi.id as order_items_id
              ,oi.products_id
              ,oi.name
              ,oi.quantity
              ,oi.price
              ,oi.amount
              ,op.id as order_options_id
              ,op.option_items_id
              ,op.name as options_name
              ,op.price as options_price
        FROM orders o
        LEFT OUTER JOIN order_items oi
            ON o.id = oi.orders_id
        LEFT OUTER JOIN order_options op
            ON oi.id = op.order_items_id
    </select>

    <!-- 주문 목록(상태별) -->
    <select id="listByStatus" resultMap="orderMap">
        SELECT o.*
              ,oi.id as order_items_id
              ,oi.products_id
              ,oi.name
              ,oi.quantity
              ,oi.price
              ,oi.amount
              ,op.id as order_options_id
              ,op.option_items_id
              ,op.name as options_name
              ,op.price as options_price
        FROM orders o
        LEFT OUTER JOIN order_items oi
            ON o.id = oi.orders_id
        LEFT OUTER JOIN order_options op
            ON oi.id = op.order_items_id
        WHERE o.ordered_at >= ( SELECT started_at FROM setting )
          AND ( status = #{status} OR status = 'COMPLETE' )
        ORDER BY o.order_number desc,o.created_at desc
    </select>

    <!-- 사용자별 주문 목록 조회 -->
    <select id="listByUsersId" resultMap="orderMap">
        SELECT o.*,
            oi.id AS order_items_id,
            oi.products_id,
            oi.name,
            oi.quantity,
            oi.price,
            oi.amount,
            op.id AS order_options_id,
            op.option_items_id,
            op.name AS options_name,
            op.price AS options_price
        FROM orders o
        LEFT OUTER JOIN order_items oi ON o.id = oi.orders_id
        LEFT OUTER JOIN order_options op ON oi.id = op.order_items_id
        WHERE o.users_id = #{usersId}
    </select>

    <!-- 주문 조회 -->
    <select id="read" resultMap="orderMap">
        SELECT o.*
              ,oi.id as order_items_id
              ,oi.products_id
              ,oi.name
              ,oi.quantity
              ,oi.price
              ,oi.amount
              ,op.id as order_options_id
              ,op.option_items_id
              ,op.name as options_name
              ,op.price as options_price
        FROM orders o
        LEFT OUTER JOIN order_items oi
            ON o.id = oi.orders_id
        LEFT OUTER JOIN order_options op
            ON oi.id = op.order_items_id
        WHERE o.id = #{id}
    </select>

    <!-- 주문 등록 -->
    <insert id="insert">
        insert into orders ( id, type, order_number, users_id, title, total_quantity, total_count, total_price, status )
        values ( #{id}, #{type}, #{orderNumber}, #{usersId}, #{title}, #{totalQuantity}, #{totalCount}, #{totalPrice}, #{status} )
    </insert>

    <!-- 아이템 등록 -->
    <insert id="insertItem">
        insert into order_items ( id, orders_id, products_id, options_id, name, quantity, price, amount  )
        values ( #{id}, #{ordersId}, #{productsId}, #{optionsId}, #{name}, #{quantity}, #{price}, #{amount} )
    </insert>

    <!-- 옵션 등록 -->
    <insert id="insertOption">
        insert into order_options ( id, option_items_id, order_items_id, name, price )
        values ( #{id}, #{optionItemsId}, #{orderItemsId}, #{name}, #{price} )
    </insert>



    <!-- 주문 수정 -->
    <update id="update">
        UPDATE orders
           SET status = #{status}
              ,updated_at = now()
        WHERE ID = #{id}
    </update>

    <!-- 주문 삭제 -->
    <insert id="delete">
        DELETE FROM orders
        WHERE id = #{id}
    </insert>

    <resultMap id="salesMap" type="SalesReport">
        <result property="avgSales" column="avg_sales" />
        <result property="totalSales" column="total_sales" />
        <result property="salesCount" column="sales_count" />
    </resultMap>

    <!-- 해당 달의 판매 총액 불러오기 -->
    <select id="totalMonth" resultMap="salesMap">
        select 
            avg(o.total_price) as avg_sales,
            sum(o.total_price) as total_sales,
            count(o.id) as sales_count
        from orders o 
        left join payments pm
            on pm.orders_id = o.id
        WHERE o.status = 'COMPLETE'
          AND DATE_FORMAT(o.ordered_at, '%Y-%m') = #{day}
    </select>

    <!-- 해당 날짜의 총액 불러오기 [판매/환불]-->
    <select id="totalDay" resultMap="salesMap">
        select 
            avg(o.total_price) as avg_sales,
            sum(o.total_price) as total_sales,
            count(o.id) as sales_count
        from orders o 
        left join payments pm
            on pm.orders_id = o.id
        where o.status = 'COMPLETE'
          AND DATE_FORMAT(o.ordered_at, '%Y-%m-%d') = #{day}
    </select>

    <!-- 해당 시간 이후부터 주문수 조회  (주문번호 부여) -->
    <select id="countOrders" resultType="int">
        SELECT COUNT(o.id) as cnt
        FROM orders o
        WHERE o.ordered_at >= (SELECT started_at FROM setting)
    </select>

</mapper>